---
- name: Deploy MERN App to EKS
  hosts: localhost
  connection: local
  vars:
    cluster_name: mern-cluster
    region: us-east-1
    namespace: mern-app
  
  tasks:
    - name: Install kubectl
      shell: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
      args:
        creates: /usr/local/bin/kubectl

    - name: Install AWS CLI
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -o awscliv2.zip
        sudo ./aws/install --update
      args:
        creates: /usr/local/bin/aws

    - name: Configure kubectl for EKS
      shell: aws eks update-kubeconfig --region {{ region }} --name {{ cluster_name }}

    - name: Create namespace
      shell: kubectl create namespace {{ namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy MongoDB
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: mongodb
          namespace: {{ namespace }}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: mongodb
          template:
            metadata:
              labels:
                app: mongodb
            spec:
              containers:
              - name: mongodb
                image: mongo:7.0
                ports:
                - containerPort: 27017
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: mongodb
          namespace: {{ namespace }}
        spec:
          selector:
            app: mongodb
          ports:
          - port: 27017
            targetPort: 27017
        EOF

    - name: Deploy Backend
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: backend
          namespace: {{ namespace }}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: backend
          template:
            metadata:
              labels:
                app: backend
            spec:
              containers:
              - name: backend
                image: node:18-alpine
                command: ["/bin/sh"]
                args: ["-c", "while true; do echo 'Backend placeholder'; sleep 30; done"]
                ports:
                - containerPort: 5050
                env:
                - name: MONGODB_URI
                  value: "mongodb://mongodb:27017"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: backend
          namespace: {{ namespace }}
        spec:
          selector:
            app: backend
          ports:
          - port: 5050
            targetPort: 5050
        EOF

    - name: Deploy Frontend with LoadBalancer
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: frontend
          namespace: {{ namespace }}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: frontend
          template:
            metadata:
              labels:
                app: frontend
            spec:
              containers:
              - name: frontend
                image: nginx:alpine
                ports:
                - containerPort: 80
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend
          namespace: {{ namespace }}
        spec:
          type: LoadBalancer
          selector:
            app: frontend
          ports:
          - port: 80
            targetPort: 80
        EOF

    - name: Wait for deployment
      shell: kubectl wait --for=condition=available --timeout=300s deployment/frontend -n {{ namespace }}

    - name: Get LoadBalancer URL
      shell: kubectl get svc frontend -n {{ namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
      register: lb_url

    - name: Display results
      debug:
        msg: |
          ðŸŽ‰ Deployment Complete!
          
          LoadBalancer URL: {{ lb_url.stdout }}
          
          Check status:
          kubectl get pods -n {{ namespace }}
          kubectl get svc -n {{ namespace }}